// Features and dependency data for BYOT Next â€” extracted/modularized from byot.html
export interface FeatureMeta {
  key: string;
  label: string;
  section: string; // Used for grouping in UI
  tooltip?: string;
  type?: "checkbox" | "select";
  options?: Array<{ value: string, label: string }>;
}

// All toggles and selects from byot.html
export const features: FeatureMeta[] = [
  // Misc
  { key: "signature", label: "Include site tag (pls)", section: "Misc" },
  { key: "comments", label: "Include comments", section: "Misc" },
  { key: "template", label: "Include template (for testing)", section: "Misc" },
  // Namespaces & Typedefs
  { key: "use_namespace_std", label: "Use namespace std", section: "Namespaces & Typedefs" },
  { key: "use_ll_typedef", label: "Use ll = long long", section: "Namespaces & Typedefs" },
  { key: "namespace_treap", label: "Wrap in namespace Treap", section: "Namespaces & Typedefs" },
  // Style
  { key: "tab_char", label: "Choose tab character", section: "Style", type: "select", options: [
    { value: "2spaces", label: "2 spaces" },
    { value: "3spaces", label: "3 spaces" },
    { value: "4spaces", label: "4 spaces" },
    { value: "8spaces", label: "8 spaces (wtf)" },
    { value: "tab", label: "Tab" },
  ] },
  // Range type
  { key: "range_type", label: "Choose range type", section: "Style", type: "select", options: [
    { value: "inc exc", label: "inc exc" },
    { value: "inc inc", label: "inc inc" },
  ] },
  // Merge options
  { key: "merge_option", label: "Include merge", section: "Core" },
  { key: "n_merge_option", label: "Include n-way merge", section: "Core" },
  { key: "plus_merge_option", label: "Include + merge", section: "Core" },
  // Key type & split options
  { key: "key_type", label: "Choose key type", section: "Key/Index", type: "select", options: [
    { value: "none", label: "None" },
    { value: "int", label: "int" },
    { value: "long long", label: "long long" },
    { value: "T", label: "T" },
  ] },
  { key: "split_option", label: "Include split", section: "Key/Index" },
  { key: "three_split_option", label: "Include 3-way split", section: "Key/Index" },
  { key: "find_option", label: "Include find", section: "Key/Index" },
  { key: "ins_option", label: "Include point insert", section: "Key/Index" },
  { key: "del_option", label: "Include point deletion", section: "Key/Index" },
  { key: "del_all_option", label: "Include multi key deletion", section: "Key/Index" },
  { key: "mod_option", label: "Include point modification", section: "Key/Index" },
  // Index-based options
  { key: "size_option", label: "Include size", section: "Index-based" },
  { key: "spliti_option", label: "Include split by index", section: "Index-based" },
  { key: "three_spliti_option", label: "Include 3-way split by index", section: "Index-based" },
  { key: "findi_option", label: "Include find by index", section: "Index-based" },
  { key: "insi_option", label: "Include point insert by index", section: "Index-based" },
  { key: "deli_option", label: "Include point deletion by index", section: "Index-based" },
  { key: "modi_option", label: "Include point modification by index", section: "Index-based" },
  { key: "rot_option", label: "Include rotation", section: "Index-based" },
  // Partition options
  { key: "partition_key", label: "Find partition key", section: "Partition" },
  { key: "partition_index", label: "Find partition index", section: "Partition" },
  { key: "cumulative_partition_key", label: "Find cumulative partition key", section: "Partition" },
  { key: "cumulative_partition_index", label: "Find cumulative partition index", section: "Partition" },
  // Misc node ops
  { key: "max_option", label: "Include max", section: "Misc Ops" },
  { key: "min_option", label: "Include min", section: "Misc Ops" },
  { key: "unite_option", label: "Include treap union (amortization)", section: "Misc Ops" },
  { key: "unite_fast_option", label: "Include treap union (brute)", section: "Misc Ops" },
  { key: "heapify_option", label: "Include heapify", section: "Misc Ops" },
  { key: "build_option", label: "Include build", section: "Misc Ops" },
  { key: "tour_option", label: "Include tour", section: "Misc Ops" },
  // Value/aggregates
  { key: "enable_value", label: "Enable value", section: "Value/Aggregates" },
  { key: "val_type", label: "Choose value type", section: "Value/Aggregates", type: "select", options: [
    { value: "none", label: "None" },
    { value: "int", label: "int" },
    { value: "long long", label: "long long" },
  ] },
  { key: "range_agg", label: "Include range aggregates", section: "Value/Aggregates" },
  { key: "range_sum", label: "Include range sum", section: "Value/Aggregates" },
  { key: "range_max", label: "Include range max", section: "Value/Aggregates" },
  { key: "range_min", label: "Include range min", section: "Value/Aggregates" },
  { key: "key_sum", label: "Include key sum", section: "Value/Aggregates" },
  // Lazy propagation & advanced range ops
  { key: "lazy_prop", label: "Include lazy propagation", section: "Lazy/Range Ops" },
  { key: "range_reverse_key", label: "Include range reverse (key)", section: "Lazy/Range Ops" },
  { key: "range_reverse_index", label: "Include range reverse (index)", section: "Lazy/Range Ops" },
  { key: "range_add", label: "Include range add", section: "Lazy/Range Ops" },
  { key: "range_set", label: "Include range set", section: "Lazy/Range Ops" },
  { key: "key_add", label: "Include key add", section: "Lazy/Range Ops" },
  { key: "key_set", label: "Include key set", section: "Lazy/Range Ops" },
  { key: "range_update_key", label: "Include range updates (key)", section: "Lazy/Range Ops" },
  { key: "range_update_index", label: "Include range updates (index)", section: "Lazy/Range Ops" },
  { key: "range_query_key", label: "Include range queries (key)", section: "Lazy/Range Ops" },
  { key: "range_query_index", label: "Include range queries (index)", section: "Lazy/Range Ops" },
  // Parent pointer/utility
  { key: "par_option", label: "Include parent pointers", section: "Utility" },
  { key: "clean_option", label: "Include clean (flush lazy tags)", section: "Utility" },
  { key: "order_option", label: "Include order (finds index of a node)", section: "Utility" },
  { key: "root_option", label: "Include root (returns the root of a node)", section: "Utility" },
  // Treap beats
  { key: "treap_beats", label: "Enable treap beats template (range sums)", section: "Treap Beats" },
  { key: "beats_chmin", label: "Include range chmin", section: "Treap Beats" },
  { key: "beats_chmax", label: "Include range chmax", section: "Treap Beats" },
  { key: "beats_add", label: "Include range add", section: "Treap Beats" },
];

// Dependency Edges (from byot.html `edges` list)
export const edges: Array<[string, string]> = [
  ["split_option", "key_type"],
  ["find_option", "key_type"],
  ["ins_option", "split_option"],
  ["spliti_option", "size_option"],
  ["insi_option", "spliti_option"],
  ["findi_option", "size_option"],
  ["n_merge_option", "merge_option"],
  ["n_merge_option", "namespace_treap"],
  ["range_add", "lazy_prop"],
  ["range_set", "lazy_prop"],
  ["key_add", "lazy_prop"],
  ["key_set", "lazy_prop"],
  ["range_update_key", "lazy_prop"],
  ["range_update_key", "merge_option"],
  ["range_update_key", "key_type"],
  ["range_update_key", "split_option"],
  ["range_update_index", "lazy_prop"],
  ["range_update_index", "size_option"],
  ["range_sum", "size_option"],
  ["key_sum", "size_option"],
  ["key_sum", "key_type"],
  ["key_add", "key_type"],
  ["key_set", "key_type"],
  ["range_query_key", "merge_option"],
  ["range_query_key", "key_type"],
  ["range_query_key", "split_option"],
  ["range_query_key", "range_agg"],
  ["range_query_index", "size_option"],
  ["range_query_index", "range_agg"],
  ["range_sum", "range_agg"],
  ["range_sum", "val_type"],
  ["range_max", "range_agg"],
  ["range_max", "val_type"],
  ["range_min", "range_agg"],
  ["range_min", "val_type"],
  ["key_sum", "range_agg"],
  ["plus_merge_option", "merge_option"],
  ["order_option", "par_option"],
  ["order_option", "size_option"],
  ["clean_option", "par_option"],
  ["clean_option", "lazy_prop"],
  ["unite_option", "merge_option"],
  ["unite_option", "split_option"],
  ["unite_option", "min_option"],
  ["unite_fast_option", "split_option"],
  ["build_option", "heapify_option"],
  ["range_reverse_key", "lazy_prop"],
  ["range_reverse_index", "lazy_prop"],
  ["range_reverse_key", "merge_option"],
  ["range_reverse_index", "merge_option"],
  ["range_reverse_key", "split_option"],
  ["range_reverse_index", "spliti_option"],
  ["del_option", "merge_option"],
  ["del_all_option", "split_option"],
  ["del_all_option", "merge_option"],
  ["del_all_option", "key_type"],
  ["deli_option", "merge_option"],
  ["deli_option", "size_option"],
  ["three_split_option", "split_option"],
  ["three_spliti_option", "spliti_option"],
  ["treap_beats", "range_agg"],
  ["treap_beats", "lazy_prop"],
  ["treap_beats", "range_update_index"],
  ["beats_chmin", "treap_beats"],
  ["beats_chmax", "treap_beats"],
  ["beats_add", "treap_beats"],
  ["val_type", "enable_value"],
  ["range_agg", "enable_value"],
  ["root_option", "par_option"],
  ["rot_option", "spliti_option"],
  ["rot_option", "merge_option"],
  ["mod_option", "key_type"],
  ["modi_option", "size_option"],
  ["partition_key", "key_type"],
  ["partition_index", "size_option"],
  ["cumulative_partition_key", "key_type"],
  ["cumulative_partition_key", "range_agg"],
  ["cumulative_partition_index", "size_option"],
  ["cumulative_partition_index", "range_agg"],
  ["treap_beats", "val_type"],
];

// Mutual exclusions
export const mutualExclusions: Array<[string, string]> = [
  ["treap_beats", "range_sum"],
  ["treap_beats", "range_min"],
  ["treap_beats", "range_max"],
];
